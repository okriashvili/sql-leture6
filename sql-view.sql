-- views - ვიუები არის ერთგვარი ვირტუალური გარემო სადაც ვინახავთ sql ბრძანებებს/მოთხოვნებს, 
-- იმისათვის რომ იგივე ბრძანებები არ ვწეროთ ბევრჯერ, შეგვიძლია viewsში შევინქხოთ და იქიდან წამოვიღოთ
-- views ში არ ინახება უშუალოდ ბრძანება/მოთხოვნა არამედ ინფორმაცია რომელიც ჩვენს მიერ გადაცემულს ბრძანებას მოაქ 

-- views არის ვურტუალური ცხრილი, რომელიც არ შეიცავს მონაცემებს, არამედ ჩვენი მოთხოვნის შედეგს შეიცავს, 
-- ანუ რა მონაცემებსაც ჩვენი მოთხოვნა აბრუნებს, ამ მონაცემებს შეიცავს იგი
-- მაგ: როდესაც მოთხოვნა დავწერეთ, როდესაც დავხურავთ sql ადმინს, ჩვენს მიერ დაწერილი მოთხოვნა დაიკარგება, 
-- ან როდესაც გვსურს ერთ მოთხოვნას ხშირად ვიყენებთ, უმჯობესია რომ შევინახოთ ეს მოთხოვნა viewsში, და შემდგომ view გამოვიყენოთ

-- 1: კოდის გამარტივება
-- viewsს ამარტივებს მოთხოვნებს რათა ერთი და იმავე მოთხვნის ხშირად დაწერა არ მოგვიწიოს

-- 2: უსაფრთხოება: 
-- შეგვიძლია crud ოპერაციებზე შევზღუდოთ იუზერი, ჯგუფები
-- დეფაულტან public სქემებზე ოთხივე ოპერციების შესრულება შეგვიძლია />>> 
-- მაგრამ viewsზე შეგვიძლია შევზღუდოთ და მხოლოდ წაშლის ან სხვა ოპერაციების შესრულების უფლება მივცეთ 

-- ეფექტურობა:
-- მაგ: ინფორმაცის წამოღებისას მოთხოვნა ეშვება ბაზაში, ბევრი ინფორმაციის წამოღებისას შესაძლოა ეფექტურობა დაკარგოს და >>> 
-- views გვაძლევს საშუალოებას რომ ეფექტურობა არ დაკარგოს ბაზამ ერთდროულად ბევრი მონაცემის გაშვებისას  

-- მონაცემთა დამოუკიდებლობა:
-- როდესაც მონაცემები მოგვაქვს, თუკი ცხრილში რაიმე მონაცემი შევცვალეთ, viewsშიც ავტომატურად შეიცვლება მონაცემი
-- მუდმივ კავშირშია ცხრილებთან, viewsში აღარ მოგვიწევს თავიდან განახლება, არამედ ავტომატურად წამოიღებს განახლებულ მონაცემს

-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-- viewsის შესაქმენელად ვიყენებთ შემდეგ სინტაქსს:
-- 1: create ბრძანება
-- 2: views საკვანძო სიტყვა
-- 3: views სახელი უნდა დავარქვათ
-- 4: as ბრძანება და
	-- create view all_data as select name, salary, department_name, location from employees e
	-- join departments d on d.department_id = e.department_id
-- შევქმენით view რომელსაც დავარქვით all_data, შიგნით კი შევინახეთ დაჯოინბული ცხრილების ინფორმაცია
-- შეგვიძლია ის ინფორმაცია წამოვიღოთ რომლის viewში შეტანაც გვინდა


-- შეგვიძლია მოთხოვნები viewზეც გავწეროთ, გავილტროთ რაღაცის მიხედვით და ა შ.
	-- select * from all_data where name ilike('%a%')
-- ან აგრეგირების ფუნქცია შევასრულოთ
	-- select avg(salary) from all_data 
-- აგრეგირების ფუქნცია და გაფილტვრს ერთად გამოვიყენოთ
	-- select sum(salary) from all_data where department_name = 'Marketing' 



-- viewს მოდიფიკაცია, შეცვლა ან ჩამატება
-- ისეთივე სინტაქსი აქვს როგორც შექმნას მაგრამ create or replaceს ვიყნებთ
-- -- მოდიფიკაციით შეგვიძლია სვეტის ჩამატება 
	-- 	create or replace view all_data as select name, salary, department_name, location, e.department_id from employees e		
	-- 	join departments d on d.department_id = e.department_id
	-- select * from all_data

-- მაგრამ არ შეგვიძლია სვეტის ამოშლა 
	-- create or replace view all_data as select name, salary, department_name from employees e		
	-- join departments d on d.department_id = e.department_id
	-- select * from all_data
-- სვეტის წასაშლელად მთლიანი view უნდა წავშალოთ და ახლუდან შევქმნათ


-- viewს წასაშლელად კი საჭიროა drop view ბრძანება
-- drop view all_data



















